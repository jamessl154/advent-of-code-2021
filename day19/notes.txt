PART 1

Unknown rotation and facing direction
x, y, z

https://www.geogebra.org/3d?lang=en

Absolute orientation cannot be found with this info, we are just fixing
scanner 0's orientation, finding matches of scanners (12 overlapping beacons)
then reconstructing a 3d map relative to that orientation

Rotations of cube while considering each side as the base
6 sides * 4 orientations each = 24 total orientations

Start at x, y, z (i.e. assume the current orientation of the scanner
being evaluated is identical to that of scanner 0)

iterate through known beacons in the map (scanners[0] at the start).
Then for unsolved scanners (not added to the map yet), how many overlapping
beacons are there in the current orientation if scanners[1][0] and
scanners[0][0] point to the same beacon?

To find 12 overlapping beacons we first make the entire scanner relative
to the base scanner by taking a base coord and subtracting the scanner coord
(travel along its vector back to its origin) that gives us the offset we add
to all beacon coords in a scanner to make them relative to the base scanner.
From here we compare that scanner against each scanner in scanner_map,
if >= 12 beacons match any scanner in the scanner_map we add that scanner
to the scanner_map and its beacons to the full_beacon_set.

Repeat for each 24 orientations

... 2nd orientation, if scanners[0][0] + scanners[1][0] point to same beacon?
... 3nd orientation, if scanners[0][0] + scanners[1][0] point to same beacon?

...

... 24th orientation,

now repeat for scanners[1][1] and scanners[0][0]

...

finally scanners[1][len(scanner) - 1] and scanners[0][0]

...

repeat with every beacon that we know exists in the map (full_beacon_set).

Need to rerun until all scanners are mapped

-----------------

Big error interpreting the challenge => to add a scanner to the map we must find
12 overlapping beacons between this scanner and any scanner that already exists in
the map.

E.g. Proven scanner[0] and scanner[1] share 12 common points

scanner[0] and scanner[1] exist in the map

condition for scanners[2] joining the map is sharing 12 common points with either
scanner[0] or scanner[1] ... e.t.c.

-----------------

Solved part1 for test.txt

using input.txt takes an unreasonable amount of time but solves part1 correctly